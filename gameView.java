
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ShaneEichner
 */
public class gameView extends javax.swing.JFrame {
    HostileNPC hostile;
    Player player;
    Warrior warrior;
    Ranger ranger;
    String nameInput;
    private int minion1 = 0;
    private int minion2 = 0;
    private int minion3 = 0;
    private int bossUnlock = 0;
    /**
     * Creates new form gameView
     */
    
    public gameView() {
        initComponents();
        hostile = new HostileNPC();
        player = new Player();
        warrior = new Warrior();
        ranger = new Ranger();
        
        //Generates a random name and stats for enemy character
//        hostile.nameGenerator();
//        hostile.healthGenerator();
//        hostile.attkGenerator();
        
        
        fightOutcome.setVisible(false);
        specialAction.setVisible(true);
        playerRest.setVisible(true);
        attackHostile.setVisible(false);
        
        middle.setVisible(false);
        dankestDungeon.setVisible(false);
        southWest.setVisible(false);
        southEast.setVisible(false);
        west.setVisible(false);
        east.setVisible(false);
        northEast.setVisible(false);
        northWest.setVisible(false);
        
        
       
       
       
       
    }
    //updates the hostile npcs character card
    private void setHostileText(){
          hostileStat.setText(hostile.toString()); 
       }
    private void setRestText(){
          switch(player.getRole()){
              case"Warrior":
                playerRestText.setText(warrior.toString());
                break;
              case"Ranger":
                playerRestText.setText(ranger.toString());
                break;
              case"Adventurer":
                playerRestText.setText(player.toString());
                break;  
          } 
       }
    
    //Updates the stat card of the players character.
    private void setPlayerCombatText(){
          switch(player.getRole()){
              case"Warrior":
                playerStat.setText(warrior.toString());
                break;
              case"Ranger":
                playerStat.setText(ranger.toString());
                break;
              case"Adventurer":
                playerStat.setText(player.toString());
                break;  
          } 
       }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        setBardClass = new javax.swing.JButton();
        setRangeClass = new javax.swing.JButton();
        setWarClass = new javax.swing.JButton();
        nameSelect = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        nameError = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        characterStory = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        startRoom = new javax.swing.JButton();
        southEast = new javax.swing.JButton();
        east = new javax.swing.JButton();
        northEast = new javax.swing.JButton();
        dankestDungeon = new javax.swing.JButton();
        middle = new javax.swing.JButton();
        southWest = new javax.swing.JButton();
        west = new javax.swing.JButton();
        northWest = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        playerRestText = new javax.swing.JTextArea();
        playerRest = new javax.swing.JButton();
        restText = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        hostileStat = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        playerStat = new javax.swing.JTextArea();
        attackHostile = new javax.swing.JButton();
        specialAction = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        fightOutcome = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        setBardClass.setText("Bard");
        setBardClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setBardClassActionPerformed(evt);
            }
        });

        setRangeClass.setText("Ranger");
        setRangeClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setRangeClassActionPerformed(evt);
            }
        });

        setWarClass.setText("Warrior");
        setWarClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setWarClassActionPerformed(evt);
            }
        });

        nameSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameSelectActionPerformed(evt);
            }
        });

        nameLabel.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameLabel.setText("Name:");

        nameError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        characterStory.setColumns(20);
        characterStory.setRows(5);
        jScrollPane5.setViewportView(characterStory);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(setBardClass, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(setRangeClass, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78)
                                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(setWarClass, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nameSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameError, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 199, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setWarClass, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameError, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setRangeClass, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(setBardClass, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(164, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane5)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Creation", jPanel2);

        startRoom.setText("Start Room");
        startRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startRoomActionPerformed(evt);
            }
        });

        southEast.setText("Southeast Room");
        southEast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                southEastActionPerformed(evt);
            }
        });

        east.setText("East Room");
        east.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eastActionPerformed(evt);
            }
        });

        northEast.setText("Northeast Room");
        northEast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                northEastActionPerformed(evt);
            }
        });

        dankestDungeon.setText("Dankest Dungeon");
        dankestDungeon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dankestDungeonActionPerformed(evt);
            }
        });

        middle.setText("Middle Room");
        middle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                middleActionPerformed(evt);
            }
        });

        southWest.setText("Southwest Room");
        southWest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                southWestActionPerformed(evt);
            }
        });

        west.setText("West Room");
        west.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                westActionPerformed(evt);
            }
        });

        northWest.setText("Northwest Room");
        northWest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                northWestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(northWest)
                    .addComponent(west, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(southWest))
                .addGap(343, 343, 343)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(middle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dankestDungeon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 343, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(northEast, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(east, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(southEast, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(northWest, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(northEast, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dankestDungeon, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(124, 124, 124)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(west, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(middle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(east, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(160, 160, 160)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(southWest, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(southEast, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane1.addTab("Map", jPanel1);

        playerRestText.setColumns(20);
        playerRestText.setRows(5);
        jScrollPane2.setViewportView(playerRestText);

        playerRest.setText("Rest");
        playerRest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerRestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(playerRest, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(restText, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(544, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(playerRest, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(restText, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(221, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Rest", jPanel4);

        hostileStat.setColumns(20);
        hostileStat.setRows(5);
        jScrollPane3.setViewportView(hostileStat);

        playerStat.setColumns(20);
        playerStat.setRows(5);
        jScrollPane4.setViewportView(playerStat);

        attackHostile.setBackground(new java.awt.Color(255, 0, 0));
        attackHostile.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        attackHostile.setText("Attack");
        attackHostile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attackHostileActionPerformed(evt);
            }
        });

        specialAction.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        fightOutcome.setColumns(20);
        fightOutcome.setRows(5);
        jScrollPane1.setViewportView(fightOutcome);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(268, 268, 268)
                        .addComponent(attackHostile, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(specialAction, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 202, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane3)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(attackHostile, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                        .addComponent(specialAction, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Combat", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1053, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameSelectActionPerformed
       
    }//GEN-LAST:event_nameSelectActionPerformed

    private void northEastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_northEastActionPerformed
        if(minion2 == 0){
           
        hostile.nameGenerator();
        hostile.healthGenerator();
        hostile.attkGenerator();
        setHostileText();
        setPlayerCombatText();
        minion2 = minion2 + 1;
        
        }else if(minion2 > 0){
            attackHostile.setVisible(false);
        }
        fightOutcome.setVisible(false);
        //Shows adjacent rooms or no rooms if you are dead
         switch(player.getRole()){
              case"Warrior":
                if(warrior.currentHP() <= 0){
                    attackHostile.setVisible(false);
                    east.setVisible(false);
                }else if(warrior.currentHP()>0){
                    attackHostile.setVisible(true);
                    middle.setVisible(false);
                    startRoom.setVisible(false);
                    southWest.setVisible(false);
                    southEast.setVisible(false);
                    west.setVisible(false);
                    east.setVisible(true);
                    dankestDungeon.setVisible(false);
                    northWest.setVisible(false);
                }
                break;
              case"Ranger":
                  if(ranger.currentHP() <= 0){
                    attackHostile.setVisible(false);
                    east.setVisible(false);
                }else if(ranger.currentHP()>0){
                    attackHostile.setVisible(true);
                    middle.setVisible(false);
                    startRoom.setVisible(false);
                    southWest.setVisible(false);
                    southEast.setVisible(false);
                    west.setVisible(false);
                    east.setVisible(true);
                    dankestDungeon.setVisible(false);
                    northWest.setVisible(false);
                }
                break;
              case"Adventurer":
                  if(player.currentHP() <= 0){
                    attackHostile.setVisible(false);
                    east.setVisible(false);
                }else if(player.currentHP()>0){
                    attackHostile.setVisible(true);
                    middle.setVisible(false);
                    startRoom.setVisible(false);
                    southWest.setVisible(false);
                    southEast.setVisible(false);
                    west.setVisible(false);
                    east.setVisible(true);
                    dankestDungeon.setVisible(false);
                    northWest.setVisible(false);
                }
                break;  
          } 
    }//GEN-LAST:event_northEastActionPerformed

    private void westActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_westActionPerformed
//        hostile.nameGenerator();
//        hostile.healthGenerator();
//        hostile.attkGenerator();
//        setHostileText();
//        setPlayerCombatText();
fightOutcome.setVisible(false);
        hostileStat.setText("There is no enemy here.");
        attackHostile.setVisible(false);
        middle.setVisible(false);
        startRoom.setVisible(false);
        southWest.setVisible(true);
        southEast.setVisible(false);
        dankestDungeon.setVisible(false);
        east.setVisible(false);
        northEast.setVisible(false);
        northWest.setVisible(true);
    }//GEN-LAST:event_westActionPerformed

    private void southEastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_southEastActionPerformed
//        hostile.nameGenerator();
//        hostile.healthGenerator();
//        hostile.attkGenerator();
//        setHostileText();
//        setPlayerCombatText();
fightOutcome.setVisible(false);
        hostileStat.setText("There is no enemy here.");
        attackHostile.setVisible(false);
        middle.setVisible(false);
        startRoom.setVisible(true);
        southWest.setVisible(false);
        dankestDungeon.setVisible(false);
        west.setVisible(false);
        east.setVisible(true);
        northEast.setVisible(false);
        northWest.setVisible(false);
    }//GEN-LAST:event_southEastActionPerformed

    private void startRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startRoomActionPerformed
        if(minion1 == 0){ 
        hostile.nameGenerator();
        hostile.healthGenerator();
        hostile.attkGenerator();
        setHostileText();
        setPlayerCombatText();
        minion1 = minion1 + 1;
        }else if(minion1 > 0){
            attackHostile.setVisible(false);
        }
        fightOutcome.setVisible(false);
         //Shows adjacent rooms or no rooms if you are dead
        switch(player.getRole()){
              case"Warrior":
                if(warrior.currentHP() <= 0){
                    attackHostile.setVisible(false);
                    southEast.setVisible(false);
                    southWest.setVisible(false);
                    middle.setVisible(false);
                }else if(warrior.currentHP()>0){
                    attackHostile.setVisible(true);
                    middle.setVisible(true);
                    dankestDungeon.setVisible(false);
                    southWest.setVisible(true);
                    southEast.setVisible(true);
                    west.setVisible(false);
                    east.setVisible(false);
                    northEast.setVisible(false);
                    northWest.setVisible(false);
                }
                break;
              case"Ranger":
                  if(ranger.currentHP() <= 0){
                    attackHostile.setVisible(false);
                    southEast.setVisible(false);
                    southWest.setVisible(false);
                    middle.setVisible(false);
                }else if(ranger.currentHP()>0){
                    attackHostile.setVisible(true);
                    middle.setVisible(true);
                    dankestDungeon.setVisible(false);
                    southWest.setVisible(true);
                    southEast.setVisible(true);
                    west.setVisible(false);
                    east.setVisible(false);
                    northEast.setVisible(false);
                    northWest.setVisible(false);
                }
                break;
              case"Adventurer":
                  if(player.currentHP() <= 0){
                    attackHostile.setVisible(false);
                    southEast.setVisible(false);
                    southWest.setVisible(false);
                    middle.setVisible(false);
                }else if(player.currentHP()>0){
                    attackHostile.setVisible(true);
                    middle.setVisible(true);
                    dankestDungeon.setVisible(false);
                    southWest.setVisible(true);
                    southEast.setVisible(true);
                    west.setVisible(false);
                    east.setVisible(false);
                    northEast.setVisible(false);
                    northWest.setVisible(false);
                }
                break;  
          } 
        
    }//GEN-LAST:event_startRoomActionPerformed

    private void southWestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_southWestActionPerformed
//        hostile.nameGenerator();
//        hostile.healthGenerator();
//        hostile.attkGenerator();
//        setHostileText();
//        setPlayerCombatText();
fightOutcome.setVisible(false);
        hostileStat.setText("There is no enemy here.");
        attackHostile.setVisible(false);
        middle.setVisible(false);
        startRoom.setVisible(true);
        dankestDungeon.setVisible(false);
        southEast.setVisible(false);
        west.setVisible(true);
        east.setVisible(false);
        northEast.setVisible(false);
        northWest.setVisible(false);
    }//GEN-LAST:event_southWestActionPerformed

    private void northWestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_northWestActionPerformed
        if(minion3 == 0){
        attackHostile.setVisible(true);
        hostile.nameGenerator();
        hostile.healthGenerator();
        hostile.attkGenerator();
        setHostileText();
        setPlayerCombatText();
        minion3 = minion3 + 1;
        
        }else if(minion3 > 0){
            attackHostile.setVisible(false);
        }
         fightOutcome.setVisible(false);
         //Shows adjacent rooms or no rooms if you are dead
        switch(player.getRole()){
              case"Warrior":
                if(warrior.currentHP() <= 0){
                    attackHostile.setVisible(false);
                    west.setVisible(false);
                }else if(warrior.currentHP()>0){
                    attackHostile.setVisible(true);
                    middle.setVisible(false);
                    startRoom.setVisible(false);
                    southWest.setVisible(false);
                    southEast.setVisible(false);
                    west.setVisible(true);
                    east.setVisible(false);
                    northEast.setVisible(false);
                    dankestDungeon.setVisible(false);
                }
                break;
              case"Ranger":
                  if(ranger.currentHP() <= 0){
                    attackHostile.setVisible(false);
                    west.setVisible(false);
                }else if(ranger.currentHP()>0){
                    attackHostile.setVisible(true);
                    middle.setVisible(false);
                    startRoom.setVisible(false);
                    southWest.setVisible(false);
                    southEast.setVisible(false);
                    west.setVisible(true);
                    east.setVisible(false);
                    northEast.setVisible(false);
                    dankestDungeon.setVisible(false);
                }
                break;
              case"Adventurer":
                  if(player.currentHP() <= 0){
                    attackHostile.setVisible(false);
                    west.setVisible(false);
                }else if(player.currentHP()>0){
                    attackHostile.setVisible(true);
                    middle.setVisible(false);
                    startRoom.setVisible(false);
                    southWest.setVisible(false);
                    southEast.setVisible(false);
                    west.setVisible(true);
                    east.setVisible(false);
                    northEast.setVisible(false);
                    dankestDungeon.setVisible(false);
                }
                break;  
          } 
        
    }//GEN-LAST:event_northWestActionPerformed

    private void middleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_middleActionPerformed
//        hostile.nameGenerator();
//        hostile.healthGenerator();
//        hostile.attkGenerator();
//        setHostileText();
//        setPlayerCombatText();
fightOutcome.setVisible(false);
        hostileStat.setText("There is no enemy here.");
        attackHostile.setVisible(false);
        dankestDungeon.setVisible(true);
        startRoom.setVisible(true);
        southWest.setVisible(false);
        southEast.setVisible(false);
        west.setVisible(false);
        east.setVisible(false);
        northEast.setVisible(false);
        northWest.setVisible(false);
    }//GEN-LAST:event_middleActionPerformed

    private void eastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eastActionPerformed
//        hostile.nameGenerator();
//        hostile.healthGenerator();
//        hostile.attkGenerator();
//        setHostileText();
//        setPlayerCombatText();
fightOutcome.setVisible(false);
        hostileStat.setText("There is no enemy here.");
        attackHostile.setVisible(false);
        middle.setVisible(false);
        startRoom.setVisible(false);
        southWest.setVisible(false);
        southEast.setVisible(true);
        west.setVisible(false);
        dankestDungeon.setVisible(false);
        northEast.setVisible(true);
        northWest.setVisible(false);
    }//GEN-LAST:event_eastActionPerformed

    private void dankestDungeonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dankestDungeonActionPerformed
        if(bossUnlock == 3){
        hostile.nameGenerator();
        hostile.healthGenerator();
        hostile.attkGenerator();
        hostile.setMonsterRole("Overlord");
        setHostileText();
        setPlayerCombatText();
        attackHostile.setVisible(true);
        }else if (bossUnlock < 3){
            hostileStat.setText("There is no enemy here.\nReturn after killing\n3 minions.");
            attackHostile.setVisible(false);
        }
         fightOutcome.setVisible(false);
         //Shows adjacent rooms or no rooms if you are dead
        switch(player.getRole()){
              case"Warrior":
                if(warrior.currentHP() <= 0){
                    attackHostile.setVisible(false);
                    middle.setVisible(false);
                }else if(warrior.currentHP()>0){
                    
                    middle.setVisible(true);
                    startRoom.setVisible(false);
                    southWest.setVisible(false);
                    southEast.setVisible(false);
                    west.setVisible(false);
                    east.setVisible(false);
                    northEast.setVisible(false);
                    northWest.setVisible(false);
                }
                break;
              case"Ranger":
                  if(ranger.currentHP() <= 0){
                    attackHostile.setVisible(false);
                    middle.setVisible(false);
                }else if(ranger.currentHP()>0){
                    
                    middle.setVisible(true);
                    startRoom.setVisible(false);
                    southWest.setVisible(false);
                    southEast.setVisible(false);
                    west.setVisible(false);
                    east.setVisible(false);
                    northEast.setVisible(false);
                    northWest.setVisible(false);
                }
                break;
              case"Adventurer":
                  if(player.currentHP() <= 0){
                    attackHostile.setVisible(false);
                    middle.setVisible(false);
                }else if(player.currentHP()>0){
                    
                    middle.setVisible(true);
                    startRoom.setVisible(false);
                    southWest.setVisible(false);
                    southEast.setVisible(false);
                    west.setVisible(false);
                    east.setVisible(false);
                    northEast.setVisible(false);
                    northWest.setVisible(false);
                }
                break;  
          } 
        
       
    }//GEN-LAST:event_dankestDungeonActionPerformed

    private void attackHostileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attackHostileActionPerformed
        // Switch Statement that selects the class the user chose for combat.
            switch(player.getRole()){  
                case"Warrior":
                
                hostile.damageHP(warrior.getWarriorAttk());
                warrior.loseHP(hostile.getAttkPwr());
                
                //The warrior class has a mechanic where each attack they gain rage
                //at 100 rage the warrior gets a free attack.
                if(warrior.getRage() < 100){
                    warrior.gainRage();
                
                    specialAction.setText("You are at " + warrior.getRage() + " rage.");
                }else if(warrior.getRage() >= 100){
                    
                    hostile.damageHP(warrior.getWarriorAttk());
                    warrior.resetRage();
                    
                    specialAction.setText("You used your momentum to perfom a second attack.");
                }
                setPlayerCombatText();
                setHostileText();
                setRestText();
                //Displays the victor of the battle
                if(warrior.currentHP()<=0){
                    fightOutcome.setVisible(true);
                    attackHostile.setVisible(false);
                    fightOutcome.setText("You have been Slain.\nGame Over!");
                    
                    middle.setVisible(false);
                    startRoom.setVisible(false);
                    southWest.setVisible(false);
                    southEast.setVisible(false);
                    west.setVisible(false);
                    east.setVisible(false);
                    dankestDungeon.setVisible(false);
                    northWest.setVisible(false);
                    northEast.setVisible(false);
                }else if(hostile.currentHP()<= 0){
                    fightOutcome.setVisible(true);   
                    attackHostile.setVisible(false);
                    if(hostile.getRole().equals("Minion")){
                    hostileStat.setText("You have defeated the enemy " + hostile.getRole());
                    fightOutcome.setText("Congratulations, you leveled up.\nYou gained 5 Strength.\nYou also gained 15 maximum HP.");
                    
                    bossUnlock = bossUnlock + 1;
                    
                    warrior.levelHP(15);
                    warrior.levelStrength(5);
                    warrior.modAttkPwr(warrior.getStrength());
                    setPlayerCombatText();
                    setRestText();
                    }else if(hostile.getRole().equals("Overlord")){
                    hostileStat.setText("You have defeated the enemy " + hostile.getRole());
                    fightOutcome.setText("Congratulations, you defeated all enemies inside of the dungeon.");
                    }
                    playerRest.setVisible(true);
                }
                
                break;
                
              case"Ranger":
                hostile.damageHP(ranger.getRangerAttk());
                ranger.loseHP(hostile.getAttkPwr());
                
                setPlayerCombatText();
                setHostileText();
                setRestText();
                //Displays the victor of the battle
                if(ranger.currentHP()<=0){
                    attackHostile.setVisible(false);
                    playerStat.setText("You have been Slain.\n Game Over!");
                    
                    middle.setVisible(false);
                    startRoom.setVisible(false);
                    southWest.setVisible(false);
                    southEast.setVisible(false);
                    west.setVisible(false);
                    east.setVisible(false);
                    dankestDungeon.setVisible(false);
                    northWest.setVisible(false);
                    northEast.setVisible(false);
                }else if(hostile.currentHP()<= 0){
                    fightOutcome.setVisible(true); 
                    attackHostile.setVisible(false);
                    if(hostile.getRole().equals("Minion")){
                    hostileStat.setText("You have defeated the enemy " + hostile.getRole());
                    fightOutcome.setText("Congratulations, you leveled up.\n You gained 5 agility.\nYou also gained 15 maximum HP.");
                    
                    bossUnlock = bossUnlock + 1;
                    
                    ranger.levelHP(15);
                    ranger.levelAgility(5);
                    ranger.modAttkPwr(ranger.getAgility());
                    setPlayerCombatText();
                    setRestText();
                    }else if(hostile.getRole().equals("Overlord")){
                    hostileStat.setText("You have defeated the enemy " + hostile.getRole());
                    fightOutcome.setText("Congratulations, you defeated all enemies inside of the dungeon.");
                    }
                    playerRest.setVisible(true);
                }
                break;
                
              case"Bard":
                hostile.damageHP(player.getAttkPwr());
                player.loseHP(hostile.getAttkPwr());
                
                setPlayerCombatText();
                setHostileText();
                setRestText();
                //Displays the victor of the battle
                if(player.currentHP()<=0){
                    attackHostile.setVisible(false);
                    playerStat.setText("You have been Slain.\n Game Over!");
                    
                    middle.setVisible(false);
                    startRoom.setVisible(false);
                    southWest.setVisible(false);
                    southEast.setVisible(false);
                    west.setVisible(false);
                    east.setVisible(false);
                    dankestDungeon.setVisible(false);
                    northWest.setVisible(false);
                    northEast.setVisible(false);
                }else if(hostile.currentHP()<= 0){
                    fightOutcome.setVisible(true); 
                    attackHostile.setVisible(false);
                    hostileStat.setText("You have defeated the enemy " + hostile.getRole());
                    fightOutcome.setText("Congratulations, you leveled up.\n You gained 5\nYou also gained 15 maximum HP.");
                    bossUnlock = bossUnlock + 1;
                    player.levelHP(15);
                    setRestText();
                    playerRest.setVisible(true);
                    //player.levelStrength(5);
                }
                break;  
          }
    }//GEN-LAST:event_attackHostileActionPerformed

    private void setWarClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setWarClassActionPerformed
        /**
         * Sets the players class to Warrior. And sets the name chosen in the text field.
         */
        String nameInput = nameSelect.getText();
        if(nameInput.equals("")){
            nameError.setText("Enter a name.");
        }else{
        warrior.setName(nameInput);
        warrior.setMaxHP(400);
        player.setPlayerRole("Warrior");
        setWarClass.setVisible(false);
        setRangeClass.setVisible(false);
        setBardClass.setVisible(false);
        nameSelect.setVisible(false);
        nameLabel.setVisible(false);
        nameSelect.setVisible(false);
        nameError.setText("Name entry accepted. Welcome.");
        characterStory.setText(warrior.getIntro());
        }
        
        setPlayerCombatText();
    }//GEN-LAST:event_setWarClassActionPerformed

    private void setRangeClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setRangeClassActionPerformed
        /**
         * Sets the players class to Ranger. And sets the name chosen in the text field.
         */
        String nameInput = nameSelect.getText();
        if(nameInput.equals("")){  
            nameError.setText("Enter a name.");
        }else{
        ranger.setName(nameInput);
        ranger.setMaxHP(375);
        player.setPlayerRole("Ranger");
        setWarClass.setVisible(false);
        setRangeClass.setVisible(false);
        setBardClass.setVisible(false);
        nameSelect.setVisible(false);
        nameLabel.setVisible(false);
        nameSelect.setVisible(false);
        nameError.setText("Name entry accepted. Welcome.");
        }
        setPlayerCombatText();
    }//GEN-LAST:event_setRangeClassActionPerformed

    private void setBardClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setBardClassActionPerformed
        /**
         * Sets the players class to Bard. And sets the name chosen in the text field.
         */
        String nameInput = nameSelect.getText();
        if(nameInput.equals("")){  
            nameError.setText("Enter a name.");
        }else{
        player.setName(nameInput);
        player.setMaxHP(355);
        player.setPlayerRole("Adventurer");
        setWarClass.setVisible(false);
        setRangeClass.setVisible(false);
        setBardClass.setVisible(false);
        nameSelect.setVisible(false);
        nameLabel.setVisible(false);
        nameSelect.setVisible(false);
        nameError.setText("Name entry accepted. Welcome.");
        }
        setPlayerCombatText();
    }//GEN-LAST:event_setBardClassActionPerformed

    private void playerRestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerRestActionPerformed
           
        /**
         * 
         * switch statement that checks what class the player chose then proceeds to heal them to full health.
         * 
         */
        switch(player.getRole()){
            
              case"Warrior":
                if(warrior.currentHP() >= warrior.getMaxHP()){
                    setRestText();
                    restText.setText("You are already at maximum health.");
                }else if(warrior.currentHP() < warrior.getMaxHP()& warrior.currentHP() > 0){  
                warrior.restHP();
                setRestText();
                restText.setText("You rest until fully healed.");
                playerRest.setVisible(false);
                setPlayerCombatText();
                }else if(warrior.currentHP()<= 0){
                playerRest.setVisible(false);
                restText.setText("You are permanently resting. Game Over.");
                }
                break;
                
              case"Ranger":
                if(ranger.currentHP() >= ranger.getMaxHP()){
                    setRestText();
                    restText.setText("You are already at maximum health.");
                }else if(ranger.currentHP() < ranger.getMaxHP() & ranger.currentHP() > 0){  
                ranger.restHP();
                setRestText();
                restText.setText("You rest until fully healed.");
                playerRest.setVisible(false);
                setPlayerCombatText();
                }else if(ranger.currentHP()<= 0){
                    playerRest.setVisible(false);
                    restText.setText("You are permanently resting. Game Over.");
                }
                break;
                
              case"Bard":
                if(player.currentHP() >= player.getMaxHP()){
                    setRestText();
                    restText.setText("You are already at maximum health.");
                }else if(player.currentHP() < player.getMaxHP() & player.currentHP() > 0){  
                player.restHP();
                setRestText();
                restText.setText("You rest until fully healed.");
                playerRest.setVisible(false);
                setPlayerCombatText();
                }else if(player.currentHP()<= 0){
                    playerRest.setVisible(false);
                    restText.setText("You are permanently resting. Game Over.");
                }
                break;  
          } 
        
    }//GEN-LAST:event_playerRestActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new gameView().setVisible(true);
        });
//        Player player = new Player();
//        Player warrior = new Warrior();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attackHostile;
    private javax.swing.JTextArea characterStory;
    private javax.swing.JButton dankestDungeon;
    private javax.swing.JButton east;
    private javax.swing.JTextArea fightOutcome;
    private javax.swing.JTextArea hostileStat;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton middle;
    private javax.swing.JLabel nameError;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameSelect;
    private javax.swing.JButton northEast;
    private javax.swing.JButton northWest;
    private javax.swing.JButton playerRest;
    private javax.swing.JTextArea playerRestText;
    private javax.swing.JTextArea playerStat;
    private javax.swing.JTextField restText;
    private javax.swing.JButton setBardClass;
    private javax.swing.JButton setRangeClass;
    private javax.swing.JButton setWarClass;
    private javax.swing.JButton southEast;
    private javax.swing.JButton southWest;
    private javax.swing.JTextField specialAction;
    private javax.swing.JButton startRoom;
    private javax.swing.JButton west;
    // End of variables declaration//GEN-END:variables
}
